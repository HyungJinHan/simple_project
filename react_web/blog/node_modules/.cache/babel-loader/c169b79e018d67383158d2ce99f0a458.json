{"ast":null,"code":"var _jsxFileName = \"C:\\\\Bitnami\\\\wampstack-8.1.5-0\\\\apache2\\\\htdocs\\\\just_make\\\\simple_project\\\\react_web\\\\blog\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\n/* eslint-disable */\nimport React, { useState } from 'react'; // React의 내장 함수인 useState를 Import함\n\nimport logo from './logo.svg';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Header(props) {\n  return /*#__PURE__*/_jsxDEV(\"header\", {\n    className: \"black_h1\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/\",\n        onClick: event => {\n          event.preventDefault(); // click 후의 새로고침이 되지 않도록 막음\n\n          props.onChangeMode();\n        },\n        children: props.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Header;\n\nfunction Nav(props) {\n  const lists = []; // lists라는 변수를 배열로 지정\n\n  for (let i = 0; i < props.topics.length; i++) {\n    let t = props.topics[i];\n    lists.push( /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        id: t.id,\n        href: '/read/' + t.id,\n        onClick: event => {\n          event.preventDefault();\n          props.onChangeMode(Number(event.target.id)); // 여기서의 key 값으로 지정된 숫자는 문자열로써 key가 지정되었기 때문에\n          // Number 함수를 사용해서 숫자로 변환을 해주면 오류가 사라짐\n        },\n        children: t.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }, this)\n    }, t.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }, this));\n  } // for 문을 이용해 list들을 생성해주고, lists의 배열에 push해주는 작업을\n  // topics라는 변수의 배열만큼 반복시켜줌\n  // react는 자동으로 생성되는 경우에는 고유의 key 값을 지정해줘서 추적이 가능하게 해야 함\n\n\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    className: \"lists\",\n    children: /*#__PURE__*/_jsxDEV(\"ol\", {\n      children: lists\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = Nav;\n\nfunction Article(props) {\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    className: \"articles\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: props.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), props.body, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 19\n    }, this), props.body1, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 20\n    }, this), props.body2]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n} // Main\n\n\n_c3 = Article;\n\nfunction App() {\n  _s();\n\n  // const _mode = useState('개발자 Blog 추천');\n  // const mode = _mode[0];\n  // const setMode = _mode[1];\n  // 및의 코드와 같은 기능\n  const [mode, setMode] = useState('개발자 Blog 추천');\n  const [id, setId] = useState(null);\n  const topics = [{\n    id: 1,\n    title: 'velog를 사용할까?',\n    body: 'velog의 장점과 단점',\n    body1: '장점 : 사용법이 간단하고 기본에 충실한 Blog',\n    body2: '장점 : 사용법이 간단하고 기본에 충실한 Blog'\n  }, {\n    id: 2,\n    title: 'Tistory를 사용할까?',\n    body: 'Tistory의 장점과 단점'\n  }, {\n    id: 3,\n    title: 'GitHub Blog를 사용할까?',\n    body: 'GitHub Blog의 장점과 단점'\n  }];\n  let content = null;\n\n  if (mode === '개발자 Blog 추천') {\n    content = /*#__PURE__*/_jsxDEV(Article, {\n      title: \"\\uAC1C\\uBC1C\\uC790 Blog\\uB97C \\uC2DC\\uC791\\uD558\\uB824\\uB294 \\uBAA8\\uB450\\uB97C \\uC704\\uD574...\",\n      body: \"\\uC5B4\\uB5A4 \\uD50C\\uB7AB\\uD3FC\\uC744 \\uC0AC\\uC6A9\\uD574\\uC57C \\uD558\\uB294\\uC9C0\\uC758 \\uB098\\uB984\\uB300\\uB85C\\uC758 \\uC815\\uBCF4\\uB4E4\\uC744 \\uC815\\uB9AC\\uD574\\uB193\\uC740 \\uBE14\\uB85C\\uADF8.\",\n      body1: \"\\uAC01\\uAC01\\uC758 \\uD50C\\uB7AB\\uD3FC\\uC758 \\uC7A5\\uC810\\uACFC \\uB2E8\\uC810\\uC744 \\uC815\\uB9AC\\uD588\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }, this);\n  } else if (mode === 'velog를 사용할까?') {\n    let title,\n        body = null;\n\n    for (let i = 0; i < topics.length; i++) {\n      if (topics[i].id === id) {\n        title = topics[i].title;\n        body = topics[i].body;\n      }\n    }\n\n    content = /*#__PURE__*/_jsxDEV(Article, {\n      title: title,\n      body: body,\n      body1: body1,\n      body2: body2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this);\n  } //   else if (mode === 'Tistory를 사용할까?') {\n  //   content =\n  //     <Article\n  //       title=\"Tistory를 사용할까?\"\n  //       body=\"Tistory의 장점과 단점\"\n  //     ></Article>\n  // } else if (mode === 'GitHub Blog를 사용할까?') {\n  //   content = \n  //     <Article\n  //       title=\"GitHub Blog를 사용할까?\"\n  //       body=\"GitHub Blog의 장점과 단점\"\n  //     ></Article>\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      title: \"\\uAC1C\\uBC1C\\uC790 Blog \\uCD94\\uCC9C\",\n      onChangeMode: () => {\n        setMode('개발자 Blog 추천');\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Nav, {\n      topics: topics,\n      onChangeMode: id => {\n        setMode('velog를 사용할까?');\n        setId(id);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), content]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"E83hiSTmry42mYaHtTUlEpLWXKI=\");\n\n_c4 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Header\");\n$RefreshReg$(_c2, \"Nav\");\n$RefreshReg$(_c3, \"Article\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["React","useState","logo","Header","props","event","preventDefault","onChangeMode","title","Nav","lists","i","topics","length","t","push","id","Number","target","Article","body","body1","body2","App","mode","setMode","setId","content"],"sources":["C:/Bitnami/wampstack-8.1.5-0/apache2/htdocs/just_make/simple_project/react_web/blog/src/App.js"],"sourcesContent":["/* eslint-disable */\nimport React, {useState} from 'react';\n// React의 내장 함수인 useState를 Import함\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction Header(props) {\n  return (\n    <header className='black_h1'>\n      <h1>\n        <a href=\"/\" onClick={(event)=>{\n          event.preventDefault();\n          // click 후의 새로고침이 되지 않도록 막음\n          props.onChangeMode();\n        }}>\n         {props.title}\n        </a>\n      </h1>\n    </header>\n  );\n}\n\nfunction Nav(props) {\n  const lists = []\n  // lists라는 변수를 배열로 지정\n\n  for(let i = 0; i < props.topics.length; i++) {\n    let t = props.topics[i];\n    lists.push(\n    <li key={t.id}>\n      <a id={t.id} href={'/read/'+t.id} onClick={(event)=>{\n        event.preventDefault();\n        props.onChangeMode(Number(event.target.id));\n        // 여기서의 key 값으로 지정된 숫자는 문자열로써 key가 지정되었기 때문에\n        // Number 함수를 사용해서 숫자로 변환을 해주면 오류가 사라짐\n      }}>\n      {/*\n      click을 통해 각각의 id를 출력하기 위해서 a 태그에 직접 id를 부여해주고,\n      event 객체가 가지고 있는 target(이벤트를 유발시킨 태그인 a)이라는 기능과\n      .id(event.target.id)를 props인 onChangeMode 함수에 지정해주면,\n      클릭했을 시, 해당 list의 id 값을 얻을 수 있음\n      */}\n       {t.title}\n      </a>\n    </li>\n    );\n  }\n  // for 문을 이용해 list들을 생성해주고, lists의 배열에 push해주는 작업을\n  // topics라는 변수의 배열만큼 반복시켜줌\n  // react는 자동으로 생성되는 경우에는 고유의 key 값을 지정해줘서 추적이 가능하게 해야 함\n\n  return (\n    <nav className='lists'>\n      <ol>\n        {lists}\n      </ol>\n    </nav>\n  );\n}\n\nfunction Article(props) {\n  return (\n    <article className='articles'>\n      <h2>\n        {props.title}\n      </h2>\n      {props.body}<br/>\n      {props.body1}<br />\n      {props.body2}\n    </article>\n  ); \n}\n\n// Main\nfunction App() {\n  // const _mode = useState('개발자 Blog 추천');\n  // const mode = _mode[0];\n  // const setMode = _mode[1];\n  // 및의 코드와 같은 기능\n\n  const [mode, setMode] = useState('개발자 Blog 추천');\n  const [id, setId] = useState(null);\n\n  const topics = [\n    {\n      id: 1, title: 'velog를 사용할까?',\n      body: 'velog의 장점과 단점',\n      body1: '장점 : 사용법이 간단하고 기본에 충실한 Blog',\n      body2: '장점 : 사용법이 간단하고 기본에 충실한 Blog',\n    },\n    {\n      id: 2, title: 'Tistory를 사용할까?',\n      body: 'Tistory의 장점과 단점'\n    },\n    {\n      id: 3, title: 'GitHub Blog를 사용할까?',\n      body: 'GitHub Blog의 장점과 단점'\n  }\n  ]\n\n  let content = null;\n  if (mode === '개발자 Blog 추천') {\n    content = \n    <Article\n      title=\"개발자 Blog를 시작하려는 모두를 위해...\"\n      body=\"어떤 플랫폼을 사용해야 하는지의 나름대로의 정보들을 정리해놓은 블로그.\"\n      body1=\"각각의 플랫폼의 장점과 단점을 정리했습니다.\"\n    ></Article>\n  } else if (mode === 'velog를 사용할까?') {\n    let title, body = null;\n    for (let i = 0; i < topics.length; i++) {\n      if (topics[i].id === id) {\n        title = topics[i].title;\n        body = topics[i].body;\n      }\n    }\n    content =\n      <Article\n        title={title}\n        body={body}\n        body1={body1}\n        body2={body2}\n      >\n      </Article>\n  }\n\n  //   else if (mode === 'Tistory를 사용할까?') {\n  //   content =\n  //     <Article\n  //       title=\"Tistory를 사용할까?\"\n  //       body=\"Tistory의 장점과 단점\"\n  //     ></Article>\n  // } else if (mode === 'GitHub Blog를 사용할까?') {\n  //   content = \n  //     <Article\n  //       title=\"GitHub Blog를 사용할까?\"\n  //       body=\"GitHub Blog의 장점과 단점\"\n  //     ></Article>\n  // }\n\n  return (\n    <div>\n      <Header title=\"개발자 Blog 추천\" onChangeMode={()=>{\n        setMode('개발자 Blog 추천');\n        }}></Header>\n      <Nav topics={topics} onChangeMode={(id)=>{\n        setMode('velog를 사용할까?');\n        setId(id);\n      }}></Nav>\n      {content}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}